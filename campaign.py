import numpy as np

# The random number generator seed
np.random.seed(367)


class Campaign:
    """
    a class to hold campaign details
    """

    def __init__(self, campaign_id):
        """
        initializing each campaign ...
        :param int campaign_id: the campaign identity
        :return None
        """
        # a unique identity, integer
        self.id = campaign_id
        # The probability that a user choose to upgrade the smartphone after being exposed to this ad campaign.
        self.conversion_rate = np.random.uniform(0.01, 0.2)
        # A random number to assign successful sale profit to the campaign.
        self.average_profit_per_sale = np.random.uniform(100., 200.)
        # Number of customers who decide to upgrade their smartphones after being exposed to this ad campaign.
        self.sales = 0
        # Number of customers who decide not to upgrade their smartphones after being exposed to this ad campaign.
        self.no_sales = 0

    def total_trials(self):
        """
        calculates the total number of times this campaign has been tried.
        :return: total number of times
        :rtype: int
        """
        return self.sales + self.no_sales

    def total_profit(self):
        """
        calculates the total profit thus far generated by this campaign
        :return: the campaign's total profit
        :rtype: float
        """
        return self.sales * self.average_profit_per_sale

    def actual_profit_per_trial(self):
        """
        calculates the actual amount pf profit per trial
        :return: the actual amount pf profit per trial
        :rtype: float
        """
        total_trials = self.total_trials()
        if total_trials > 0:
            return self.total_profit() / total_trials
        else:
            return 0.

    def expected_profit_per_trial(self):
        """
        calculates the expected (theoretical) amount pf profit per trial
        :return: the expected amount pf profit per trial
        :rtype: float
        """
        return self.conversion_rate * self.average_profit_per_sale

    def __str__(self):
        return f"Campaign ({self.id}): c_rate: {self.conversion_rate}, " \
               f"a_p_p_sale: {self.average_profit_per_sale}"
